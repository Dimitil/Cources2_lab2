
/*************************************************************
	Практическое занятие №2 курс С110. Функции.
	Указатели на функции

*************************************************************/
#include <iostream>
#include <tchar.h>
//#include <cstdio>
#include <cstdarg>
#include "other.h"
#include <cmath>

#define	  stop __asm nop
				
int _tmain()
{
	//Задание 1. 
	//Указатели на массивы в качестве аргументов.
	//Напишите два варианта функции печати элементов
	//1. во встроенном двумерном массиве
	//int ar[N][M] = {список инициализаторов};//подумайте - как и где должны быть заданы N и M


	// N и M должны быть заданы ГЛОБАЛЬНО в файле заголовочном

	std::cout << "Zadanie 1.1 Print fix array \n";

	int ar[row][col] = { 1, 2, 4,6,2,3,576,2,-1 };

	printArray(ar, sizeof(ar)/sizeof(ar[0]));

	stop
		//PrintArray(ar, ... может быть, понадобится передать еще какие-нибудь данные);
		//2. в динамическом двумерном массиве (обе размерности вычисляются)

		std::cout << "\nZadanie 1.2 Print dynamic array \n";

		int rowD = 4;
		int colD = 5;

		int** arD = new int*[rowD];

		for (int i = 0; i < rowD; i++)
			arD[i] = new int[colD];

		for (int i = 0; i < rowD; i++)
		{
			for (int j = 0; j < colD; j++)
			{
				arD[i][j] = i * j;
			}
			
		}

		std::cout << std::endl;

		printArray(arD, rowD, colD);

	

	stop
/////////////////////////////////////////////////////////////////////////////
	//Задание 2.
	//Передача указателя на встроенныймассив в качестве параметра функции.
			//Напишите две взаимодополняющие друг друга функции:
			//1.  ... DayOfYear(...)
			//- преобразует день месяца (число,месяц и год задаются в качестве параметров)
			//в порядковый день года(возвращаемое значение)
			//2. ... DayOfMonth(...) - функция преобразует порядковый день года в день месяца
			// (принимает год и порядковый день года в качестве параметров и должна сформировать
			// день месяца и номер месяца и каким-то образом сообщить эти значения вызывающей процедуре)

			//Проверьте работоспособность обеих функций с помощью следующего фрагмента:


			//В процессе вычислений Вам придется учитывать "високосный - невисокосный" год.
			//для проверки "високосности" года имеет смысл создать функцию (isLeepYear)
			//Для этого предлагается в каждую функцию в качестве одного из параметров передавать
			//данные приведенного ниже двухмерного массива nDayTab

	int nDayTab[2][12] = {
		{31,28,31,30,31,30,31,31,30,31,30,31}, //невисокосный год
		{31,29,31,30,31,30,31,31,30,31,30,31} };	//високосный год


	
	//Вызов функции DayOfYear
	//...
	std::cout << "\nZadanie 2. DayOfYear(19, 9, 2000, nDayTab) \n";
	std::cout<<DayOfYear(12, 9, 2000, nDayTab); //выводит 256
	std::cout << std::endl;
	//Проверка результата обратной функцией DayOfMonth
	//...
	int rday=-1;
	int rmonth=-1;
	std::cout << "\nZadanie 2. DayOfMonth(2000, 256,  nDayTab) \n";
	DayOfMonth(2000, 256, nDayTab, rday, rmonth);	
	std::cout << rday<<'.'<<rmonth;	//12.9 вывод

	stop
		/////////////////////////////////////////////////////////////////////////////
			//Задание 3.
			//Задание 3а. Функции с переменным числом параметров.
			//Напишите функцию (дана заготовка VarArgs, не использующая
			// макросы), которая принимает переменное число аргументов
			// типа int и выводит на печать число принятых параметров и
			// их значения.
			// Признаком конца списка является нулевое значение.

		std::cout << std::endl;
	std::cout << "\nZadanie 3a. no macros\n";
	int nN1=5, nN2=11, nN3=4, nN4=7, nN5=-1;
	VarArgs(nN1,0);	
	VarArgs(nN1,nN2,0);	
	VarArgs(nN1,nN2,nN3,nN4,nN5,0);	
	stop

		//Задание 3б. Модифицируйте функцию 3а с помощью макросов
		// va_start, va_arg, va_end

		std::cout << "\nZadanie 3b. with macros\n";
	VarArgs2(nN1, 0);
	VarArgs2(nN1, nN2, 0);
	VarArgs2(nN1, nN2, nN3, nN4, nN5, 0);
	stop


		///////////////////////////////////////////////////////////////////
			//Тема Указатели на функции

			//Задание 4. Указатель на функцию. "Калькулятор".
			//Напишите функции:
			//1)Sum - принимает два значения double и возвращает сумму
			//этих значений
			//2)Sub- принимает два значения double и возвращает разность
			//этих значений
			//3)Mul - *
			//4)Div - /
			//5)а для возведения в степень можете использовать функцию стандартной библиотеки
			//		- pow(). Подсказка 1: прототип функции находится в <cmath>.
			//		Подсказка 2: стандартная библиотека предоставляет несколько перегруженных
			//		вариантов этой функции, а Вам потребуется сформировать указатель на 
			//		double pow(double, double);

			//Предоставьте пользователю	следующую возможность:
			//пока пользователь хочет пользоваться услугами Вашего калькулятора,
			//он может вводить два значения и знак операции
			//а Вы выводите результат. Результат получаете посредством вызова
			//соответствующей Вашей функции по указателю.
			//Предусмотрите возможность ввода непредусмотренного знака операции
		int a, b;
		char choice=1;

		double (*ptrfunc)(double, double)=NULL;

		while (choice)
		{
			std::cout << "\n\nZadanie 4. Calculator:\nEnter 'a', 'b' and '+' ";
			std::cout<<"or '-' or '*' or '/' or '^'\n for exit enter 0 0 0\n\n";
			std::cin >> a >> b >> choice;
			
			switch (choice) {
			case '+': ptrfunc = Sum;
				break;
			case '-': ptrfunc = Sub;
				break;
			case '*': ptrfunc = Mul;
				break;
			case '/': ptrfunc = Div;
				break;
			case '^': ptrfunc = pow;
				break;
			case '0':
				std::cout << "\nExit from calculator\n";
				break;
			default:
				std::cout<<"\nUnknown command\n";
				continue;
			}
			if (choice != '0')
				std::cout << "\nAnswer: " << ptrfunc(a, b) << "\n\n";
			else break;
		}

		stop
			///////////////////////////////////////////////////////////////////
				//Задание 5. Указатель на функцию в качестве аргумента.
				//Дана заготовка функции сортировки любых объектов - Sort.
				//Функция принимает следующие параметры:
				//1) указатель на первый сортируемый элемент
				//2) количество сортируемых элементов
				//3) размер элемента в байтах
				//4) указатель на функцию перестановки элементов
				//5) указатель на функцию сравнения элементов

				//5a. Напишите функцию перестановки двух целых значений -
				// SwapInt, которая принимает два void указателя и 
				//меняет значения местами

	//Напишите функцию сравнения двух целых значений -
	// CmpInt, которая принимает два void указателя и
	//возвращает int результат сравнения: 
	//<0 - первый элемент меньше, чем второй
	//=0 - равны
	//>0 - первый элемент больше, чем второй
			std::cout << "\n Zadanie 5.a int sort \n";
			int nAr[] = {2, 4, -1, 2, 0};	//массив для сортировки

		//Печать исходного массива
			std::cout << "\nbefore:\n";
		for (int i = 0; i < sizeof(nAr) / sizeof(nAr[0]); i++)
			std::cout << nAr[i] << ' ';
		std::cout << std::endl;

		//Вызов сортировки
		int nTotal = sizeof(nAr) / sizeof(nAr[0]);			//количество элементов в массиве
		Sort(reinterpret_cast<char*>(&nAr[0]), nTotal, sizeof(int), SwapInt, CmpInt);

		//Печать результатов сортировки
		std::cout << "\nafter:\n";
		for (int i = 0; i < nTotal; i++)
			std::cout << nAr[i] << ' ';
		std::cout << std::endl;
		stop
	
	/*
	//Задание 5б. По аналогии с 5а создайте вспомогательные
	//функции - SwapDouble и CmpDouble и вызовите функцию Sort
	//для сортировки массива вещественных значений.
	*/
			std::cout << "\nZadanie 5.b double sort \n";
			double nArD[] = { 2.1, 4.2, -1.3, 2.2, 0.1 };	//массив для сортировки

				//Печать исходного массива
			std::cout << "\nbefore:\n";
		for (int i = 0; i < sizeof(nArD) / sizeof(nArD[0]); i++)
			std::cout << nArD[i] << ' ';
		std::cout << std::endl;

		//Вызов сортировки
		int nTotalD = sizeof(nArD) / sizeof(nArD[0]);			//количество элементов в массиве
		Sort(reinterpret_cast<char*>(&nArD[0]), nTotalD, sizeof(double), SwapDouble, CmpDouble);

		//Печать результатов сортировки
		std::cout << "\nafter:\n";
		for (int i = 0; i < nTotal; i++)
			std::cout << nArD[i] << ' ';
		std::cout << std::endl;
		stop

	
	//Задание 5в*. По аналогии с 5а создайте вспомогательные
	//функции - SwapStr и CmpStr и вызовите функцию Sort
	//для сортировки массива указателей на строки.

			std::cout << "\nZadanie 5.v array * char sort \n";
	const char* arStr[] = {"QQQ", "WWW", "ABC", "CBA"};
	int nTotalStr = 4;
	
	std::cout << "\nbefore:\n";
	for (int i = 0; i < nTotalStr; i++)
		std::cout << arStr[i] << '\n';

	Sort(reinterpret_cast<char*>(&arStr[0]), nTotalStr, sizeof(arStr)/sizeof(arStr[0]), SwapStr, CmpStr);

	std::cout << "\nafter:\n";
	for(int i=0; i<nTotalStr; i++)
	std::cout << arStr[i]<<'\n';
	stop
///////////////////////////////////////////////////////////////////
	
	//Задание 6. Массивы указателей на функцию.
	//Напишите несколько функций вида
	//const char* GetString1();
	//const char* GetString2();
	//		...., каждая из функций возвращает указатель на свою строку
	//(подумайте - какой адрес Вы имеете право возвращать из функции)


	//Объявите и проинициализируйте массив указателей на функции
	//GetString1,GetString2...
		std::cout << "\nZadanie 6:\n";
	const char* (*fp[3])()={getString1, getString2, getString3};

	

	//Введите номер функции, которую Вы хотите вызвать:
		int n=1;

	



	//Вызовите функцию

	//Распечатайте результат

		std::cout << (*fp[n])();
	
		stop
			////////////////////////////////////////////////////////////////////////////
				//Задание 7*.
				//Создайте одномерный массив (размерность вычисляется в процессе
				//выполнения программы), заполните его значениями.
				//Напишите функцию, которая добавляет в массив новое значение только (!) при условии,
				//что такого значения в массиве еще нет. 
				//Подсказка: при этом размер  массива должен увеличиться!
				//Для проверки напишите функцию, которая выводит значения всех элементов на экран
			std::cout << "\n\nZadanie 7: \n";
			int size = 2;

		int* Ar = new int[size];

		Ar[0] = 2;
		Ar[1] = 4;

		std::cout << "\nArray before: \n";
		PrintAr(Ar, size);

		ArAdd(Ar, size, 5);

		std::cout << "\nArray after ArAdd(Ar, size, 5): \n";
		PrintAr(Ar, size);
		delete[]Ar;
///////////////////////////////////////////////////////////////////////////

	//Задание 8.  
	//Рекурсивные функции.
	//8.1.Написать рекурсивную функцию вычисления суммы первых N натуральных чисел. 
	//8.2.Написать рекурсивную функцию вычисления количества цифр 10-чного натурального числа 
	//8.3.Написать рекурсивную функцию для вывода на экран строки в обратном порядке. 
	//8.4.Написать рекурсивную функцию для вывода на экран строки в прямом ! порядке.
	
		std::cout << "\n\nZadanie 8.1\n sum of first N numbers sum(4)\n";
		std::cout << sum(4);

		std::cout << "\n\nZadanie 8.2\n count of digits in Num count(4452)\n";
		std::cout << count(4452);
	
		std::cout << "\n\nZadanie 8.3\n revers print recPrintRevers(\"Hello\")\n";
		recPrintRevers("Hello");
		std::cout << std::endl;
	
		std::cout << "\n\nZadanie 8.4\n recursiv print recPrint(\"Hello\")\n";
		recPrint("Hello");
		std::cout << std::endl;
	return 0;
}//main